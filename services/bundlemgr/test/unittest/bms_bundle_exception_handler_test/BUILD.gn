# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundlemgrservice"

ohos_unittest("BmsBundleExceptionHandlerTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [
    "//third_party/jsoncpp/include",
    "//third_party/json/include",
  ]
  sources = [
    "${services_path}/bundlemgr/src/bundle_exception_handler.cpp",
    "${services_path}/bundlemgr/src/inner_bundle_info.cpp",
    "${services_path}/bundlemgr/src/inner_bundle_user_info.cpp",
    "${services_path}/bundlemgr/src/inner_common_info.cpp",
    "${services_path}/bundlemgr/src/sandbox_app/bundle_sandbox_app_helper.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_install_client.cpp",
  ]

  sources += [ "bms_bundle_exception_handler_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_dependencies/dependencies_entry:dependencies_entry",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]

  deps += bundle_install_deps

  external_deps = [
    "appverify:libhapverify",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
  ]
  external_deps += bundle_install_external_deps
  if (bundle_framework_graphics) {
    external_deps += [ "image_framework:image_native" ]
  }

  defines = []
  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "${services_path}/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
}

group("unittest") {
  testonly = true
  if (ability_runtime_enable) {
    deps = [ ":BmsBundleExceptionHandlerTest" ]
  }
}
