# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundle_framework"

ohos_unittest("BmsBundleDataMgrTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${inner_api_path}/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_data_mgr_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_kit/test:test",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:api_cache_manager",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (current_cpu == "arm64") {
    defines += [ "USE_EXTENSION_DATA" ]
  }
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (app_domain_verify_enabled) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
}

ohos_unittest("BmsBundleKitServiceTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/ability_manager_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/test/mock/src/mock_ability_manager_helper.cpp",
  ]
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_kit_service_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_kit/test:test",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (current_cpu == "arm64") {
    defines += [ "USE_ARM64" ]
  }
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleKitServiceTwoTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/ability_manager_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/test/mock/src/mock_ability_manager_helper.cpp",
  ]
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_kit_service_test_two.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_kit/test:test",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:api_cache_manager",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (current_cpu == "arm64") {
    defines += [ "USE_ARM64" ]
  }
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleGetWindowPropertiesTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources -= [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [ "bms_bundle_get_window_properties_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/sandboxTest:sandboxTest",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleDataMgrTest2") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${inner_api_path}/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_data_mgr_test_two.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_kit/test:test",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (current_cpu == "arm64") {
    defines += [ "USE_EXTENSION_DATA" ]
  }
  include_dirs = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (app_domain_verify_enabled) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
}

ohos_unittest("BmsBundleDataMgrTest3") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${inner_api_path}/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_data_mgr_test_three.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_kit/test:test",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (current_cpu == "arm64") {
    defines += [ "USE_EXTENSION_DATA" ]
  }
  include_dirs = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (app_domain_verify_enabled) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
}

ohos_unittest("BmsAgingTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/ability_manager_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/test/mock/src/mock_ability_manager_helper.cpp",
  ]
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_aging_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:api_cache_manager",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (current_cpu == "arm64") {
    defines += [ "USE_ARM64" ]
  }
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsCleanAllBundleCacheTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ 
    "mock/include",
    "${kits_path}/js/bundle_manager",
  ]
  sources = bundle_mgr_source

  sources += [ "mock/src/mock_ipc_skeleton.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/ability_manager_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/test/mock/src/mock_ability_manager_helper.cpp",
  ]
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_clean_all_bundle_cache_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${base_path}:appexecfwk_base",
    "${core_path}:appexecfwk_core",
    "${kits_path}/js/bundle_manager:bundle_manager_common",
    "${kits_path}/js/common:bundle_napi_common",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "napi:ace_napi",
    "safwk:api_cache_manager",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps
  public_external_deps = [ "libuv:uv" ]
  defines = []
  if (current_cpu == "arm64") {
    defines += [ "USE_ARM64" ]
  }
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleDataMgrSharedTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${inner_api_path}/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/bundle_permission_mgr.cpp" ]
  sources +=
      [ "${services_path}/bundlemgr/test/mock/src/bundle_permission_mgr.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/ability_manager_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/test/mock/src/mock_ability_manager_helper.cpp",
  ]

  sources += ["bms_bundle_data_mgr_shared_test.cpp"]
  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_kit/test:test",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = [ "BUNDLE_NOT_IS_NAYIVE_TOKEN_TYPE" ]
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (app_domain_verify_enabled) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
}

ohos_unittest("BmsBundleDataMgrSharedTestNoMock") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${inner_api_path}/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/bundle_permission_mgr.cpp" ]
  sources +=
      [ "${services_path}/bundlemgr/test/mock/src/bundle_permission_mgr.cpp" ]

  sources += ["bms_bundle_data_mgr_shared_test_no_mock.cpp"]
  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "${inner_api_path}/appexecfwk_base:appexecfwk_base_sdk_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_kit/test:test",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = [ "BUNDLE_NOT_IS_NAYIVE_TOKEN_TYPE" ]
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (ability_runtime_enable) {
    external_deps += [ "ability_runtime:ability_manager" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (user_auth_framework_impl_enabled) {
    external_deps += [ "user_auth_framework:userauth_client" ]
    defines += [ "BMS_USER_AUTH_FRAMEWORK_ENABLED" ]
    include_dirs += [ "${services_path}/bundlemgr/include/user_auth" ]
    sources += user_auth
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (app_domain_verify_enabled) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
}

group("unittest") {
  testonly = true

  if (ability_runtime_enable) {
    deps = [
      ":BmsAgingTest",
      ":BmsBundleDataMgrSharedTestNoMock",
      ":BmsBundleDataMgrSharedTest",
      ":BmsBundleDataMgrTest",
      ":BmsBundleDataMgrTest2",
      ":BmsBundleDataMgrTest3",
      ":BmsBundleGetWindowPropertiesTest",
      ":BmsBundleKitServiceTest",
      ":BmsBundleKitServiceTwoTest",
      ":BmsCleanAllBundleCacheTest",
    ]
  }
}
