# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundlemgrservice"

ohos_unittest("BmsInstallDaemonTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = [
    "${services_path}/bundlemgr/src/system_ability_helper.cpp",
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
  ]

  sources += install_daemon_sources

  sources -=
      [ "${services_path}/bundlemgr/src/installd/installd_permission_mgr.cpp" ]

  sources += [ "bms_install_daemon_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/install_daemon/right:right",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest:rightTest",
    "${core_path}:appexecfwk_core",
    "${services_path}/bundlemgr:bundle_parser",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "ets_runtime:libcompiler_service",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  external_deps += bundle_install_external_deps

  defines = []
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (code_signature_enable) {
    external_deps += [ "code_signature:libcode_sign_utils" ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:udmf_client" ]
  }
}

ohos_unittest("BmsInstallDaemonIpcTest") {
  use_exceptions = true
  module_out_path = module_output_path

  sources = [
    "${services_path}/bundlemgr/src/aot/aot_args.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/bundle_util.cpp",
    "${services_path}/bundlemgr/src/common/serial_queue.cpp",
    "${services_path}/bundlemgr/src/ipc/check_encryption_param.cpp",
    "${services_path}/bundlemgr/src/ipc/code_signature_param.cpp",
    "${services_path}/bundlemgr/src/ipc/create_dir_param.cpp",
    "${services_path}/bundlemgr/src/ipc/extract_param.cpp",
    "${services_path}/bundlemgr/src/ipc/file_stat.cpp",
    "${services_path}/bundlemgr/src/ipc/installd_host.cpp",
    "${services_path}/bundlemgr/src/ipc/installd_proxy.cpp",
    "${services_path}/bundlemgr/src/system_ability_helper.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_installd_host_impl.cpp",
  ]

  sources += [ "bms_install_daemon_ipc_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${common_path}:libappexecfwk_common",
    "${core_path}:appexecfwk_core",
    "${services_path}/bundlemgr:bundle_parser",
  ]

  external_deps = [
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "ets_runtime:libcompiler_service",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  external_deps += bundle_install_external_deps

  defines = []
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (code_signature_enable) {
    sources += [ "${services_path}/bundlemgr/src/code_sign_helper.cpp" ]
    include_dirs = [ "${services_path}/bundlemgr/include" ]
    external_deps += [ "code_signature:libcode_sign_utils" ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:udmf_client" ]
  }
}

ohos_unittest("BmsInstallDaemonHostImplTest") {
  use_exceptions = true
  module_out_path = module_output_path

  sources = [
    "${services_path}/bundlemgr/src/aot/aot_args.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/bundle_util.cpp",
    "${services_path}/bundlemgr/src/common/serial_queue.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/src/ipc/check_encryption_param.cpp",
    "${services_path}/bundlemgr/src/ipc/code_signature_param.cpp",
    "${services_path}/bundlemgr/src/ipc/create_dir_param.cpp",
    "${services_path}/bundlemgr/src/ipc/extract_param.cpp",
    "${services_path}/bundlemgr/src/ipc/file_stat.cpp",
    "${services_path}/bundlemgr/src/ipc/installd_host.cpp",
    "${services_path}/bundlemgr/src/ipc/installd_proxy.cpp",
    "${services_path}/bundlemgr/src/system_ability_helper.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
  ]

  sources += [ "bms_install_daemon_host_impl_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${common_path}:libappexecfwk_common",
    "${core_path}:appexecfwk_core",
    "${services_path}/bundlemgr:bundle_parser",
  ]

  external_deps = [
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "ets_runtime:libcompiler_service",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  external_deps += bundle_install_external_deps

  defines = [ "BUNDLE_FRAMEWORK_RETURN_FALSE" ]
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (code_signature_enable) {
    sources += [ "${services_path}/bundlemgr/src/code_sign_helper.cpp" ]
    include_dirs = [ "${services_path}/bundlemgr/include" ]
    external_deps += [ "code_signature:libcode_sign_utils" ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:udmf_client" ]
  }
}

ohos_unittest("BmsInstallDaemonOperatorTest") {
  use_exceptions = true
  module_out_path = module_output_path

  sources = [
    "${services_path}/bundlemgr/src/aot/aot_args.cpp",
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/bundle_util.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/src/ipc/check_encryption_param.cpp",
    "${services_path}/bundlemgr/src/ipc/code_signature_param.cpp",
    "${services_path}/bundlemgr/src/ipc/create_dir_param.cpp",
    "${services_path}/bundlemgr/src/ipc/extract_param.cpp",
  ]

  sources += [ "bms_install_daemon_operator_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${common_path}:libappexecfwk_common",
    "${core_path}:appexecfwk_core",
    "${services_path}/bundlemgr:bundle_parser",
  ]

  external_deps = [
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "ets_runtime:libcompiler_service",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]
  defines = [ "BUNDLE_FRAMEWORK_RETURN_FALSE" ]
  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (code_signature_enable) {
    sources += [ "${services_path}/bundlemgr/src/code_sign_helper.cpp" ]
    include_dirs = [ "${services_path}/bundlemgr/include" ]
    external_deps += [ "code_signature:libcode_sign_utils" ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }
}

group("unittest") {
  testonly = true

  if (ability_runtime_enable) {
    deps = [
      ":BmsInstallDaemonHostImplTest",
      ":BmsInstallDaemonIpcTest",
      ":BmsInstallDaemonOperatorTest",
      ":BmsInstallDaemonTest",
    ]
  }
}
