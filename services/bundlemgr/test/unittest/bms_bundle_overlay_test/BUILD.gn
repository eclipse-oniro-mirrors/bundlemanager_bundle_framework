# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundlemgrservice"

ohos_unittest("BmsBundleOverlayCheckerTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = [
    "${services_path}/bundlemgr/src/account_helper.cpp",
    "${services_path}/bundlemgr/src/bms_param.cpp",
    "${services_path}/bundlemgr/src/bundle_common_event_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_data_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_event_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/src/bundle_scanner.cpp",
    "${services_path}/bundlemgr/src/bundle_state_storage.cpp",
    "${services_path}/bundlemgr/src/bundle_status_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_user_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/hidump_helper.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/src/installd/installd_service.cpp",
  ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_quick_fix_callback.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  defines = []
  sources += bundle_install_sources
  if (bundle_framework_overlay_install) {
    include_dirs += [ "${services_path}/bundlemgr/include/overlay" ]
    sources += overlay_installation
    sources += [ "bms_bundle_overlay_checker_test.cpp" ]
    defines += [ "BUNDLE_FRAMEWORK_OVERLAY_INSTALLATION" ]
  }

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = bundle_install_deps

  external_deps = [
    "ability_base:want",
    "access_token:libtokenid_sdk",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (bms_rdb_enable) {
    configs += [ "../../../../../services/bundlemgr:rdb_config" ]
    defines += [ "BMS_RDB_ENABLE" ]
    external_deps += [ "relational_store:native_rdb" ]
    sources += [
      "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
      "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
      "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
    ]
  } else {
    external_deps += [ "kv_store:distributeddata_inner" ]
    sources += [
      "${services_path}/bundlemgr/src/kvstore_death_recipient_callback.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage.cpp",
      "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_database.cpp",
    ]
  }
}

ohos_unittest("BmsBundleOverlayInfoTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/json/include" ]
  sources = [
    "${base_path}/src/overlay/overlay_bundle_info.cpp",
    "${base_path}/src/overlay/overlay_module_info.cpp",
  ]

  defines = []
  if (bundle_framework_overlay_install) {
    include_dirs += [ "${base_path}/include/overlay" ]
    sources += [ "bms_bundle_overlay_info_test.cpp" ]
    defines += [ "BUNDLE_FRAMEWORK_OVERLAY_INSTALLATION" ]
  }

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "${common_path}:libappexecfwk_common" ]

  external_deps = [
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_single",
  ]

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
}

ohos_unittest("BmsBundleOverlayIpcTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/json/include" ]
  sources = [
    "${core_path}/src/overlay/overlay_manager_host.cpp",
    "${core_path}/src/overlay/overlay_manager_proxy.cpp",
  ]

  defines = []
  if (bundle_framework_overlay_install) {
    include_dirs += [ "${core_path}/include/overlay" ]
    sources += [ "bms_bundle_overlay_ipc_test.cpp" ]
    defines += [ "BUNDLE_FRAMEWORK_OVERLAY_INSTALLATION" ]
  }

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "${common_path}:libappexecfwk_common" ]

  external_deps = [
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
}

ohos_unittest("BmsBundleManagerOverlayIpcTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [
    "//third_party/jsoncpp/include",
    "${services_path}/bundlemgr/test/mock/include/parameter",
    "//base/startup/init/interfaces/innerkits/include",
  ]
  sources = [
    "${services_path}/bundlemgr/src/account_helper.cpp",
    "${services_path}/bundlemgr/src/bms_param.cpp",
    "${services_path}/bundlemgr/src/bundle_common_event_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_data_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_event_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/src/bundle_scanner.cpp",
    "${services_path}/bundlemgr/src/bundle_state_storage.cpp",
    "${services_path}/bundlemgr/src/bundle_status_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_user_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/hidump_helper.cpp",
  ]

  sources += bundle_install_sources

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameter.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameters.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/systemcapability.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  defines = []
  if (bundle_framework_overlay_install) {
    sources += overlay_installation
    sources += [ "bms_bundle_manager_overlay_ipc_test.cpp" ]
    defines += [ "BUNDLE_FRAMEWORK_OVERLAY_INSTALLATION" ]
  }

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = []

  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "access_token:libtokenid_sdk",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  if (bundle_framework_graphics) {
    external_deps += [ "multimedia_image_framework:image_native" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (hicollie_enable) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent_native:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bms_rdb_enable) {
    configs += [ "../../../../../services/bundlemgr:rdb_config" ]
    defines += [ "BMS_RDB_ENABLE" ]
    external_deps += [ "relational_store:native_rdb" ]
    sources += [
      "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
      "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
      "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
    ]
  } else {
    external_deps += [ "kv_store:distributeddata_inner" ]
    sources += [
      "${services_path}/bundlemgr/src/kvstore_death_recipient_callback.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage.cpp",
      "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_database.cpp",
    ]
  }
}

group("unittest") {
  testonly = true

  if (ability_runtime_enable) {
    deps = [
      ":BmsBundleManagerOverlayIpcTest",
      ":BmsBundleOverlayCheckerTest",
      ":BmsBundleOverlayInfoTest",
      ":BmsBundleOverlayIpcTest",
    ]
  }
}
