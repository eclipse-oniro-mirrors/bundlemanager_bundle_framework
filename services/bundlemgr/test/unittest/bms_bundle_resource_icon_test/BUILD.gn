# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundle_framework"

ohos_unittest("BmsBundleResourceIconRdbTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_resource_icon_rdb_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/defaultAppTest:defaultAppTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/resourceManagerTest:resourceManagerTest",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "json:nlohmann_json_static",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps
  defines = []

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]

  if (global_i18n_enable) {
    defines += [ "GLOBAL_I18_ENABLE" ]
    external_deps += [ "i18n:intl_util" ]
  }
  
  if (bundle_framework_bundle_resource) {
    defines += [ "BUNDLE_FRAMEWORK_BUNDLE_RESOURCE" ]
    external_deps += [ "ability_base:configuration" ]
    if (bundle_framework_graphics) {
      defines += [ "BUNDLE_FRAMEWORK_GRAPHICS" ]
      external_deps += [
        "ace_engine:drawable_descriptor",
        "image_framework:image_native",
      ]
    }
    sources += bundle_resource
  }
}

ohos_unittest("BmsBundleResourceThemeProcessTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = []
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_status.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_clean_cache.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_resource_theme_process_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/defaultAppTest:defaultAppTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/resourceManagerTest:resourceManagerTest",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "json:nlohmann_json_static",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps
  defines = []

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]

  if (global_i18n_enable) {
    defines += [ "GLOBAL_I18_ENABLE" ]
    external_deps += [ "i18n:intl_util" ]
  }

  if (bundle_framework_bundle_resource) {
    defines += [ "BUNDLE_FRAMEWORK_BUNDLE_RESOURCE" ]
    external_deps += [ "ability_base:configuration" ]
    if (bundle_framework_graphics) {
      defines += [ "BUNDLE_FRAMEWORK_GRAPHICS" ]
      external_deps += [
        "ace_engine:drawable_descriptor",
        "image_framework:image_native",
      ]
    }
    sources += bundle_resource
  }
}

group("unittest") {
  testonly = true
  deps = [ 
    ":BmsBundleResourceIconRdbTest",
    ":BmsBundleResourceThemeProcessTest",
    ]

}
