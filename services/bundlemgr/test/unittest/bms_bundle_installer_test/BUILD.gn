# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundlemgrservice"

ohos_unittest("BmsBundleInstallerTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_installer_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/backupTest:backupTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/devicetype_error:devicetype_error",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/fifth_right:fifth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_right:first_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/fourth_right:fourth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/moduleJsonTest:moduleJsonTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/previewTest:previewTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest:rightTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest1:rightTest1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/second_right:second_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/seventh_right:seventh_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/signatureTest:signatureTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/system_module:system_module",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/third_right:third_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/thumbnailTest:thumbnailTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest1:versionTest1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest2:versionTest2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest3:versionTest3",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionUpdateTest1:versionUpdateTest1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionUpdateTest2:versionUpdateTest2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionUpdateTest3:versionUpdateTest3",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionUpdateTest4:versionUpdateTest4",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionUpdateTest5:versionUpdateTest5",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionUpdateTest6:versionUpdateTest6",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionUpdateTest7:versionUpdateTest7",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/wrong_bundle_name:wrong_bundle_name",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (current_cpu == "arm64") {
    defines += [ "USE_BUNDLE_EXTENSION" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bundle_framework_quick_fix) {
    include_dirs += [ "${services_path}/bundlemgr/src/include/quick_fix" ]
    sources += quick_fix
    defines += [ "BUNDLE_FRAMEWORK_QUICK_FIX" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  external_deps += [ "kv_store:distributeddata_inner" ]
  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (app_domain_verify_enabled) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
}

ohos_unittest("BmsBundleOtaUpdateTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_ota_update_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestAplDown:otaUpdateTestAplDown",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestAplUp:otaUpdateTestAplUp",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestAppField:otaUpdateTestAppField",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestAppField2:otaUpdateTestAppField2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestAppFieldUBSan:otaUpdateTestAppFieldUBSan",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestBasis:otaUpdateTestBasis",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestBasis/feature1:otaUpdateTestBasisFeature1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestBasis/feature2:otaUpdateTestBasisFeature2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestBasis2:otaUpdateTestBasis2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestBasisUBSan:otaUpdateTestBasisUBSan",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestModuleField:otaUpdateTestModuleField",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestSignaIcon:otaUpdateTestSignaIcon",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestSoChanged:otaUpdateTestSoChanged",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestSoChanged/feature1:otaUpdateTestSoChangedFeature1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/otaUpdateTestSoChanged/feature2:otaUpdateTestSoChangedFeature2",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (current_cpu == "arm64") {
    defines += [ "USE_BUNDLE_EXTENSION" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bundle_framework_quick_fix) {
    include_dirs += [ "${services_path}/bundlemgr/src/include/quick_fix" ]
    sources += quick_fix
    defines += [ "BUNDLE_FRAMEWORK_QUICK_FIX" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  external_deps += [ "kv_store:distributeddata_inner" ]
  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsMultipleBundleInstallerTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_multiple_installer_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/eighth_right:eighth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/eleventh_right:eleventh_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/fifteenth_right:fifteenth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_diff_minCompCode:first_diff_minCompCode",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_diff_release_type:first_diff_release_type",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_right:first_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_right_compCode:first_right_compCode",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_right_with_diff_moduleName:first_right_with_diff_moduleName",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_right_with_diff_moduleType:first_right_with_diff_moduleType",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/fourteenth_right:fourteenth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/fourth_right:fourth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/ninth_right:ninth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest:rightTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest1:rightTest1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/second_backup_right:second_backup_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/second_right:second_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/second_right_with_same_moduleName:second_right_with_same_moduleName",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/seventh_right:seventh_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/sixteenth_right:sixteenth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/sixth_right:sixth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/tenth_right:tenth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/testhapdemo:testhapdemo",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/testhapdemo2:testhapdemo2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/testhapdemo3:testhapdemo3",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/third_right:third_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/thirteenth_right:thirteenth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/twelfth_right:twelfth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest1:versionTest1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest2:versionTest2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest3:versionTest3",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/wrong_bundle_name:wrong_bundle_name",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  external_deps += [ "kv_store:distributeddata_inner" ]
  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleInstallIpcTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_stream_installer_host_impl.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources -=
      [ "${services_path}/bundlemgr/src/bundle_stream_installer_host_impl.cpp" ]

  sources += [ "bms_bundle_installer_ipc_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [ "${core_path}:appexecfwk_core" ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleInstallCheckerTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [
    "//third_party/jsoncpp/include",
    "../../mock/include/parameter",
  ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameter.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameters.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += [ "bms_bundle_install_checker_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [ "${core_path}:appexecfwk_core" ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appverify:libhapverify",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  defines += [ "GET_BOOL_PARAMETER_TRUE" ]
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (code_signature_enable) {
    sources +=
        [ "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp" ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
}

ohos_unittest("BmsBundleInstallDeviceTypeTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [
    "//third_party/jsoncpp/include",
    "../../mock/include/parameter",
  ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameter.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameters.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/systemcapability.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += [ "bms_bundle_install_device_type_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [ "${core_path}:appexecfwk_core" ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appverify:libhapverify",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (code_signature_enable) {
    sources +=
        [ "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp" ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
}

ohos_unittest("BmsSystemBundleInstallerTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [
    "//third_party/jsoncpp/include",
    "${services_path}/bundlemgr/test/mock/include/parameter",
  ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameter.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameters.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/systemcapability.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += [ "bms_system_bundle_installer_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "${core_path}:appexecfwk_core" ]

  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appverify:libhapverify",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps
  if (bundle_framework_graphics) {
    external_deps += [ "image_framework:image_native" ]
  }
  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "${services_path}/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (code_signature_enable) {
    sources +=
        [ "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp" ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }
}

ohos_unittest("BmsBundleInstallDriverTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [
    "//third_party/jsoncpp/include",
    "${services_path}/bundlemgr/test/mock/include/parameter",
  ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameter.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/parameters.cpp",
    "${services_path}/bundlemgr/test/mock/src/parameter/systemcapability.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += [ "bms_bundle_install_driver_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature:driver_feature_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature1:driver_feature1_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature10:driver_feature10_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature15:driver_feature15_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature16:driver_feature16_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature17:driver_feature17_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature18:driver_feature18_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature2:driver_feature2_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature3:driver_feature3_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature4:driver_feature4_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature5:driver_feature5_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature6:driver_feature6_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature7:driver_feature7_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature8:driver_feature8_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/driver_feature9:driver_feature9_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/high_version_driver_feature13:high_version_driver_feature13_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/high_version_non_driver_feature11:high_version_non_driver_feature11_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/lower_version_driver_feature14:lower_version_driver_feature14_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/lower_version_non_driver_feature12:lower_version_non_driver_feature12_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/non_driver_entry:non_driver_entry_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/driver_test/non_driver_entry1:non_driver_entry1_hap",
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${core_path}:appexecfwk_core",
  ]

  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps
  if (bundle_framework_graphics) {
    external_deps += [ "image_framework:image_native" ]
  }
  defines = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  configs += [ "${services_path}/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_data_storage_rdb.cpp",
  ]
  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleAppServiceFwkInstallerTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_app_service_fwk_installer.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_app_service/app_service_version1_library1:appService_v1_library1",
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_app_service/app_service_version1_library2:appService_v1_library2",
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_app_service/app_service_version2_library1:appService_v2_library1",
    "${bundle_framework_path}/test/sceneProject/unittest/bundle_app_service/app_service_version2_library2:appService_v2_library2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest:rightTest",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps

  defines = []
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (current_cpu == "arm64") {
    defines += [ "USE_BUNDLE_EXTENSION" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bundle_framework_quick_fix) {
    include_dirs += [ "${services_path}/bundlemgr/src/include/quick_fix" ]
    sources += quick_fix
    defines += [ "BUNDLE_FRAMEWORK_QUICK_FIX" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  external_deps += [ "kv_store:distributeddata_inner" ]
  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }
}

ohos_unittest("BmsBundleInstallerPermissionTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = bundle_mgr_source
  sources -= [ "${services_path}/bundlemgr/src/bms_param.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/bms_param.cpp" ]
  sources -= [ "${services_path}/bundlemgr/src/system_ability_helper.cpp" ]
  sources += [
    "${services_path}/bundlemgr/src/aot/aot_executor.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_service.cpp",
  ]
  sources -=
      [ "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp" ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources
  sources -= [ "${services_path}/bundlemgr/src/installd_client.cpp" ]
  sources += [ "${services_path}/bundlemgr/test/mock/src/installd_client.cpp" ]

  sources += [ "bms_bundle_installer_permission_test.cpp" ]

  configs = [ "${services_path}/bundlemgr/test:bundlemgr_test_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${bundle_framework_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/backupTest:backupTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/devicetype_error:devicetype_error",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/fifth_right:fifth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/first_right:first_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/fourth_right:fourth_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/moduleJsonTest:moduleJsonTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/previewTest:previewTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest:rightTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/rightTest1:rightTest1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/second_right:second_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/seventh_right:seventh_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/signatureTest:signatureTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/system_module:system_module",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/third_right:third_right",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/thumbnailTest:thumbnailTest",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest1:versionTest1",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest2:versionTest2",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/versionTest3:versionTest3",
    "${bundle_framework_path}/test/sceneProject/unittest/test_bundle/wrong_bundle_name:wrong_bundle_name",
    "${core_path}:appexecfwk_core",
  ]
  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "appspawn:hnpapi",
    "appverify:libhapverify",
    "bounds_checking_function:libsec_shared",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
  ]
  external_deps += bundle_install_external_deps
  defines = [ "BUNDLE_FRAMEWORK_RETURN_FALSE" ]
  if (code_signature_enable) {
    sources += [
      "${services_path}/bundlemgr/src/aot/aot_sign_data_cache_mgr.cpp",
      "${services_path}/bundlemgr/src/code_sign_helper.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include" ]
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "code_signature:libcode_sign_utils",
      "ets_runtime:libcompiler_service",
    ]
    defines += [ "CODE_SIGNATURE_ENABLE" ]
  }

  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (bundle_framework_app_control) {
    defines += [ "BUNDLE_FRAMEWORK_APP_CONTROL" ]
    sources += [
      "${services_path}/bundlemgr/src/app_control/app_control_manager.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_host_impl.cpp",
      "${services_path}/bundlemgr/src/app_control/app_control_manager_rdb.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_event_subscriber.cpp",
      "${services_path}/bundlemgr/src/app_control/app_jump_interceptor_manager_rdb.cpp",
    ]
    include_dirs += [ "${services_path}/bundlemgr/include/app_control" ]
    external_deps += [ "c_utils:utils" ]
  }
  if (current_cpu == "arm64") {
    defines += [ "USE_BUNDLE_EXTENSION" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bundle_framework_quick_fix) {
    include_dirs += [ "${services_path}/bundlemgr/src/include/quick_fix" ]
    sources += quick_fix
    defines += [ "BUNDLE_FRAMEWORK_QUICK_FIX" ]
  }

  if (storage_service_enable) {
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
    defines += [ "STORAGE_SERVICE_ENABLE" ]
  }

  external_deps += [ "kv_store:distributeddata_inner" ]
  configs += [ "../../../../../services/bundlemgr:rdb_config" ]
  external_deps += [ "relational_store:native_rdb" ]
  sources += [
    "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
    "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
    "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
  ]
  if (udmf_enabled) {
    defines += [ "BUNDLE_FRAMEWORK_UDMF_ENABLED" ]
    external_deps += [ "udmf:utd_client" ]
  }

  if (bms_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "BMS_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (app_domain_verify_enabled) {
    external_deps += [
      "app_domain_verify:app_domain_verify_common",
      "app_domain_verify:app_domain_verify_mgr_client",
    ]
    defines += [ "APP_DOMAIN_VERIFY_ENABLED" ]
  }
}

group("unittest") {
  testonly = true

  if (ability_runtime_enable) {
    deps = [
      ":BmsBundleAppServiceFwkInstallerTest",
      ":BmsBundleInstallCheckerTest",
      ":BmsBundleInstallDeviceTypeTest",
      ":BmsBundleInstallDriverTest",
      ":BmsBundleInstallIpcTest",
      ":BmsBundleInstallerPermissionTest",
      ":BmsBundleInstallerTest",
      ":BmsBundleOtaUpdateTest",
      ":BmsMultipleBundleInstallerTest",
      ":BmsSystemBundleInstallerTest",
    ]
  }
}
