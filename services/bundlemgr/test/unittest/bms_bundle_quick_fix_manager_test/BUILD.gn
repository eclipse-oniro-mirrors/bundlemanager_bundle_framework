# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundlemgrservice"

ohos_unittest("BmsBundleQuickFixManagerTest") {
  use_exceptions = true

  module_out_path = module_output_path

  sources = [ "bms_bundle_quick_fix_manager_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "//base/notification/eventhandler/frameworks/eventhandler:libeventhandler_config",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "//foundation/bundlemanager/bundle_framework/common:libappexecfwk_common",
  ]

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "distributed_bundle_framework:dbms_fwk",
    "distributeddatamgr:distributeddata_inner",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }
  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (bundle_framework_free_install) {
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_info_manager:distributed_device_profile_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (device_manager_enable) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "DEVICE_MANAGER_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (hisysevent_enable) {
    external_deps += [ "hisysevent_native:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }
  if (bundle_framework_default_app) {
    defines += [ "BUNDLE_FRAMEWORK_DEFAULT_APP" ]
  }
  if (bundle_framework_quick_fix) {
    defines += [ "BUNDLE_FRAMEWORK_QUICK_FIX" ]
  }
}

group("unittest") {
  testonly = true
  if (ability_runtime_enable) {
    deps = [ ":BmsBundleQuickFixManagerTest" ]
  }
}
