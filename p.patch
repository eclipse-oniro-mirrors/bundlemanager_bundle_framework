diff --git a/interfaces/inner_api/appexecfwk_base/include/appexecfwk_errors.h b/interfaces/inner_api/appexecfwk_base/include/appexecfwk_errors.h
index 7d9e257b09659e386b750f3f770fa0ddc3f4dada..254dd3a6621283ccd57d8e9b6e4b5da4aeb393ac 100644
--- a/interfaces/inner_api/appexecfwk_base/include/appexecfwk_errors.h
+++ b/interfaces/inner_api/appexecfwk_base/include/appexecfwk_errors.h
@@ -263,6 +263,9 @@ enum {
     ERR_BUNDLE_MANAGER_QUERY_APPLICATION_DISABLED,
     ERR_BUNDLE_MANAGER_QUERY_PARAM_ERROR,
     ERR_BUNDLE_MANAGER_QUERY_PERMISSION_DENIED,
+    ERR_BUNDLE_MANAGER_QUERY_EXTENSION_NOT_EXIST,
+    ERR_BUNDLE_MANAGER_QUERY_GET_PERMISSION_DEFINE_FAILED,
+    ERR_BUNDLE_MANAGER_QUERY_EMPTY_BUNDLE_NAME,
 };

diff --git a/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_interface.h b/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_interface.h
index 4e3681608f6c75a09441634878e9654c88c07fad..0b7d1dca2274b0029d63eb1b10f7fe362d43ba06 100644
--- a/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_interface.h
+++ b/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_interface.h
@@ -509,9 +509,9 @@ public:
      * @param permissionDef Indicates the object containing detailed information about the given ohos permission.
      * @return Returns true if the PermissionDef object is successfully obtained; returns false otherwise.
      */
-    virtual bool GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
+    virtual ErrCode GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
     {
-        return false;
+        return ERR_OK;
     }
     /**
      * @brief Checks whether the system has a specified capability.
diff --git a/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_proxy.h b/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_proxy.h
index 46f8ecf34e752ad112eb8c274382715cd9ed13cf..f532707ae713e64aca1fabe1c9a6ce9060af276a 100644
--- a/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_proxy.h
+++ b/interfaces/inner_api/appexecfwk_core/include/bundlemgr/bundle_mgr_proxy.h
@@ -373,7 +373,7 @@ public:
      * @param permissionDef Indicates the object containing detailed information about the given ohos permission.
      * @return Returns true if the PermissionDef object is successfully obtained; returns false otherwise.
      */
-    virtual bool GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef) override;
+    virtual ErrCode GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef) override;
     /**
      * @brief Checks whether the system has a specified capability through the proxy object.
      * @param capName Indicates the name of the system feature to check.
diff --git a/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_host.cpp b/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_host.cpp
index 4ce05eec1a37bb864194b6689b728ff5bf7fc68e..10f9604bfd5ec04b6713d24319bf770c936b14c6 100644
--- a/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_host.cpp
+++ b/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_host.cpp
@@ -958,12 +958,12 @@ ErrCode BundleMgrHost::HandleGetPermissionDef(MessageParcel &data, MessageParcel
     APP_LOGI("name %{public}s", permissionName.c_str());

     PermissionDef permissionDef;
-    bool ret = GetPermissionDef(permissionName, permissionDef);
-    if (!reply.WriteBool(ret)) {
+    ErrCode ret = GetPermissionDef(permissionName, permissionDef);
+    if (!reply.WriteInt32(ret)) {
         APP_LOGE("write failed");
         return ERR_APPEXECFWK_PARCEL_ERROR;
     }
-    if (ret) {
+    if (ret == ERR_OK) {
         if (!reply.WriteParcelable(&permissionDef)) {
             APP_LOGE("write failed");
             return ERR_APPEXECFWK_PARCEL_ERROR;
diff --git a/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp b/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp
index 3fd3557c51e69116f6487d9621795165349a0f90..3be46a4e183f8157c09dc3f782975d2ab64901c9 100644
--- a/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp
+++ b/interfaces/inner_api/appexecfwk_core/src/bundlemgr/bundle_mgr_proxy.cpp
@@ -1267,30 +1267,26 @@ int BundleMgrProxy::CheckPublicKeys(const std::string &firstBundleName, const st
     return reply.ReadInt32();
 }

-bool BundleMgrProxy::GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
+ErrCode BundleMgrProxy::GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
 {
     HITRACE_METER_NAME(HITRACE_TAG_APP, __PRETTY_FUNCTION__);
     APP_LOGD("begin to GetPermissionDef of %{public}s", permissionName.c_str());
     if (permissionName.empty()) {
         APP_LOGE("fail to GetPermissionDef due to params empty");
-        return false;
+        return ERR_BUNDLE_MANAGER_QUERY_EMPTY_BUNDLE_NAME;
     }

     MessageParcel data;
     if (!data.WriteInterfaceToken(GetDescriptor())) {
         APP_LOGE("fail to GetPermissionDef due to write InterfaceToken fail");
-        return false;
+        return ERR_APPEXECFWK_PARCEL_ERROR;
     }
     if (!data.WriteString(permissionName)) {
         APP_LOGE("fail to GetPermissionDef due to write permissionName fail");
-        return false;
+        return ERR_APPEXECFWK_PARCEL_ERROR;
     }

-    if (!GetParcelableInfo<PermissionDef>(IBundleMgr::Message::GET_PERMISSION_DEF, data, permissionDef)) {
-        APP_LOGE("fail to GetPermissionDef from server");
-        return false;
-    }
-    return true;
+    return GetParcelableInfoWithErrCode<PermissionDef>(IBundleMgr::Message::GET_PERMISSION_DEF, data, permissionDef);
 }

 bool BundleMgrProxy::HasSystemCapability(const std::string &capName)
diff --git a/interfaces/kits/js/bundle_manager/bundle_manager.cpp b/interfaces/kits/js/bundle_manager/bundle_manager.cpp
index 3ce7f9e053dfc7f2a8f8a1cf680482cbaee8db5b..78cc97e09c90578ed5858c65ee492990fdd48466 100644
--- a/interfaces/kits/js/bundle_manager/bundle_manager.cpp
+++ b/interfaces/kits/js/bundle_manager/bundle_manager.cpp
@@ -92,8 +92,8 @@ napi_value QueryAbilityInfos(napi_env env, napi_callback_info info)
     if (asyncCallbackInfo == nullptr) {
         APP_LOGE("asyncCallbackInfo is null");
         BusinessError::ThrowError(env, OUT_OF_MEMORY_ERROR);
-        return nullptr;
-    }
+    return nullptr;
+}
     asyncCallbackInfo->userId = IPCSkeleton::GetCallingUid() / Constants::BASE_USER_RANGE;
     std::unique_ptr<AbilityCallbackInfo> callbackPtr {asyncCallbackInfo};
     if (!args.Init(ARGS_SIZE_TWO, ARGS_SIZE_FOUR)) {
@@ -176,5 +176,126 @@ void CreateAbilityFlagObject(napi_env env, napi_value value)
     NAPI_CALL_RETURN_VOID(env, napi_set_named_property(env, value, "GET_ABILITY_INFO_ONLY_SYSTEM_APP",
         nGetAbilityInfOnlySystemApp));
 }
+
+static void ConvertPermissionDef(napi_env env, napi_value result, const PermissionDef &permissionDef)
+{
+    napi_value nPermissionName;
+    NAPI_CALL_RETURN_VOID(
+        env, napi_create_string_utf8(env, permissionDef.permissionName.c_str(), NAPI_AUTO_LENGTH, &nPermissionName));
+    NAPI_CALL_RETURN_VOID(env, napi_set_named_property(env, result, "permissionName", nPermissionName));
+
+    napi_value nGrantMode;
+    NAPI_CALL_RETURN_VOID(env, napi_create_int32(env, permissionDef.grantMode, &nGrantMode));
+    NAPI_CALL_RETURN_VOID(env, napi_set_named_property(env, result, "grantMode", nGrantMode));
+
+    napi_value nLabelId;
+    NAPI_CALL_RETURN_VOID(env, napi_create_int32(env, permissionDef.labelId, &nLabelId));
+    NAPI_CALL_RETURN_VOID(env, napi_set_named_property(env, result, "labelId", nLabelId));
+
+    napi_value nDescriptionId;
+    NAPI_CALL_RETURN_VOID(env, napi_create_int32(env, permissionDef.descriptionId, &nDescriptionId));
+    NAPI_CALL_RETURN_VOID(env, napi_set_named_property(env, result, "descriptionId", nDescriptionId));
+}
+
+static ErrCode InnerGetPermissionDef(napi_env env, const std::string &permissionName, PermissionDef &permissionDef)
+{
+    auto iBundleMgr = CommonFunc::GetBundleMgr();
+    if (iBundleMgr == nullptr) {
+        APP_LOGE("can not get iBundleMgr");
+        return false;
+    };
+    return iBundleMgr->GetPermissionDef(permissionName, permissionDef);
+}
+
+void GetPermissionDefExec(napi_env env, void *data)
+{
+    AsyncPermissionDefineCallbackInfo *asyncCallbackInfo = static_cast<AsyncPermissionDefineCallbackInfo *>(data);
+    if (asyncCallbackInfo == nullptr) {
+        APP_LOGE("%{public}s, asyncCallbackInfo == nullptr.", __func__);
+        return;
+    }
+    if (!asyncCallbackInfo->err) {
+        asyncCallbackInfo->err = InnerGetPermissionDef(env, asyncCallbackInfo->permissionName,
+            asyncCallbackInfo->permissionDef);
+    }
+}
+
+void GetPermissionDefComplete(napi_env env, napi_status status, void *data)
+{
+    AsyncPermissionDefineCallbackInfo *asyncCallbackInfo = static_cast<AsyncPermissionDefineCallbackInfo *>(data);
+    if (asyncCallbackInfo == nullptr) {
+        APP_LOGE("asyncCallbackInfo is null in %{public}s", __func__);
+        return;
+    }
+    std::unique_ptr<AsyncPermissionDefineCallbackInfo> callbackPtr {asyncCallbackInfo};
+    napi_value result[ARGS_SIZE_TWO] = {0};
+    if (asyncCallbackInfo->err == ERR_OK) {
+        NAPI_CALL_RETURN_VOID(env, napi_get_null(env, &result[ARGS_POS_ZERO]));
+        NAPI_CALL_RETURN_VOID(env, napi_create_object(env, &result[ARGS_POS_ONE]));
+        ConvertPermissionDef(env, result[ARGS_POS_ONE], asyncCallbackInfo->permissionDef);
+    } else {
+        result[0] = BusinessError::CreateError(env, asyncCallbackInfo->err, "");
+    }
+    if (asyncCallbackInfo->deferred) {
+        if (asyncCallbackInfo->err == ERR_OK) {
+            NAPI_CALL_RETURN_VOID(env, napi_resolve_deferred(env, asyncCallbackInfo->deferred, result[ARGS_POS_ONE]));
+        } else {
+            NAPI_CALL_RETURN_VOID(env, napi_reject_deferred(env, asyncCallbackInfo->deferred, result[ARGS_POS_ZERO]));
+        }
+    } else {
+        napi_value callback = nullptr;
+        napi_value placeHolder = nullptr;
+        NAPI_CALL_RETURN_VOID(env, napi_get_reference_value(env, asyncCallbackInfo->callback, &callback));
+        NAPI_CALL_RETURN_VOID(env, napi_call_function(env, nullptr, callback,
+            sizeof(result) / sizeof(result[ARGS_POS_ZERO]), result, &placeHolder));
+    }
+}
+
+/**
+ * Promise and async callback
+ */
+napi_value GetPermissionDef(napi_env env, napi_callback_info info)
+{
+    APP_LOGD("GetPermissionDef called");
+    NapiArg args(env, info);
+    AsyncPermissionDefineCallbackInfo *asyncCallbackInfo = new (std::nothrow) AsyncPermissionDefineCallbackInfo(env);
+    if (asyncCallbackInfo == nullptr) {
+        APP_LOGE("asyncCallbackInfo is null.");
+        BusinessError::ThrowError(env, OUT_OF_MEMORY_ERROR);
+        return nullptr;
+    }
+    std::unique_ptr<AsyncPermissionDefineCallbackInfo> callbackPtr {asyncCallbackInfo};
+    if (!args.Init(ARGS_SIZE_ONE, ARGS_SIZE_TWO)) {
+        APP_LOGE("param count invalid");
+        BusinessError::ThrowError(env, PARAM_CHECK_ERROR);
+        return nullptr;
+    }
+    for (size_t i = 0; i < args.GetMaxArgc(); ++i) {
+        napi_valuetype valuetype = napi_undefined;
+        NAPI_CALL(env, napi_typeof(env, args[i], &valuetype));
+        if ((i == ARGS_POS_ZERO) && (valuetype == napi_string)) {
+            if(!CommonFunc::ParseString(env, args[i], asyncCallbackInfo->permissionName)) {
+                APP_LOGE("permissionName %{public}s invalid!", asyncCallbackInfo->permissionName.c_str());
+                BusinessError::ThrowError(env, PARAM_CHECK_ERROR);
+                return nullptr;
+            }
+        } else if (i == ARGS_POS_ONE) {
+            if (valuetype == napi_function) {
+                NAPI_CALL(env, napi_create_reference(env, args[i], NAPI_RETURN_ONE, &asyncCallbackInfo->callback));
+            } else {
+                APP_LOGD("GetDisposedStatus extra arg ignored");
+            }
+        } else {
+            APP_LOGE("GetDisposedStatus arg err!");
+            BusinessError::ThrowError(env, PARAM_CHECK_ERROR);
+            return nullptr;
+        }
+    }
+
+    auto promise = CommonFunc::AsyncCallNativeMethod<AsyncPermissionDefineCallbackInfo>(
+        env, asyncCallbackInfo, "GetPermissionDef", GetPermissionDefExec, GetPermissionDefComplete);
+    callbackPtr.release();
+    return promise;
+}
 }
 }
\ No newline at end of file
diff --git a/interfaces/kits/js/bundle_manager/bundle_manager.h b/interfaces/kits/js/bundle_manager/bundle_manager.h
index a47978e5ed79786211db47b007db37d3ea0a76f4..b8a3e270ff94295164df080d272d93133d37f302 100644
--- a/interfaces/kits/js/bundle_manager/bundle_manager.h
+++ b/interfaces/kits/js/bundle_manager/bundle_manager.h
@@ -19,6 +19,7 @@
 #include "ability_info.h"
 #include "base_cb_info.h"
 #include "bundle_constants.h"
+#include "bundle_mgr_interface.h"
 #include "napi/native_api.h"
 #include "napi/native_common.h"
 #include "napi/native_node_api.h"
@@ -35,7 +36,15 @@ struct AbilityCallbackInfo : public BaseCallbackInfo {
     std::vector<AbilityInfo> abilityInfos;
 };

+struct AsyncPermissionDefineCallbackInfo : public BaseCallbackInfo {
+    explicit AsyncPermissionDefineCallbackInfo(napi_env env) : BaseCallbackInfo(env) {}
+    std::string permissionName;
+    OHOS::AppExecFwk::PermissionDef permissionDef;
+};
+
 napi_value QueryAbilityInfos(napi_env env, napi_callback_info info);
+
+napi_value GetPermissionDef(napi_env env, napi_callback_info info);
 void CreateAbilityFlagObject(napi_env env, napi_value value);
 }  // namespace AppExecFwk
 }  // namespace OHOS
diff --git a/interfaces/kits/js/bundle_manager/native_module.cpp b/interfaces/kits/js/bundle_manager/native_module.cpp
index 9261ed8dbcac8dee28763b4191857d1458ebaf76..126a2d791ef37f1b78671640dcf6f3231e12aa78 100644
--- a/interfaces/kits/js/bundle_manager/native_module.cpp
+++ b/interfaces/kits/js/bundle_manager/native_module.cpp
@@ -31,6 +31,7 @@ static napi_value BundleManagerExport(napi_env env, napi_value exports)

     napi_property_descriptor desc[] = {
         DECLARE_NAPI_FUNCTION("queryAbilityInfos", QueryAbilityInfos),
+        DECLARE_NAPI_FUNCTION("getPermissionDef", GetPermissionDef),
         DECLARE_NAPI_PROPERTY("AbilityFlag", abilityFlag),
     };

diff --git a/interfaces/kits/js/bundlemgr/bundle_mgr.cpp b/interfaces/kits/js/bundlemgr/bundle_mgr.cpp
index 1f572cf99edbe60883eeb794629ea3cdff1ef795..1597115042c5017116893320a90f81f92c05612b 100644
--- a/interfaces/kits/js/bundlemgr/bundle_mgr.cpp
+++ b/interfaces/kits/js/bundlemgr/bundle_mgr.cpp
@@ -2964,11 +2964,12 @@ static bool InnerGetPermissionDef(napi_env env, const std::string &permissionNam
         APP_LOGE("can not get iBundleMgr");
         return false;
     };
-    bool ret = iBundleMgr->GetPermissionDef(permissionName, permissionDef);
-    if (!ret) {
+    ErrCode ret = iBundleMgr->GetPermissionDef(permissionName, permissionDef);
+    if (ret != ERR_OK) {
         APP_LOGE("permissionName is not find");
+        return false;
     }
-    return ret;
+    return true;
 }

 /**
diff --git a/services/bundlemgr/include/bundle_mgr_host_impl.h b/services/bundlemgr/include/bundle_mgr_host_impl.h
index c684cbbc9d8b5a4847ff28798e1bb3090533053a..ce5482680570dcc4a798b6c8181898f9c35202ea 100644
--- a/services/bundlemgr/include/bundle_mgr_host_impl.h
+++ b/services/bundlemgr/include/bundle_mgr_host_impl.h
@@ -385,7 +385,7 @@ public:
      * @param permissionDef Indicates the object containing detailed information about the given ohos permission.
      * @return Returns true if the PermissionDef object is successfully obtained; returns false otherwise.
      */
-    virtual bool GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef) override;
+    virtual ErrCode GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef) override;
     /**
      * @brief Checks whether the system has a specified capability.
      * @param capName Indicates the name of the system feature to check.
diff --git a/services/bundlemgr/include/bundle_permission_mgr.h b/services/bundlemgr/include/bundle_permission_mgr.h
index a2e18b2b85c1521358ab85a9e6d0a9a50f6272aa..757f9d8af13cb9c481a41c836a80d366d2bb9003 100644
--- a/services/bundlemgr/include/bundle_permission_mgr.h
+++ b/services/bundlemgr/include/bundle_permission_mgr.h
@@ -49,7 +49,7 @@ public:
      * @param permissionDef Indicates the object containing detailed information about the given permission.
      * @return Returns true if the PermissionDef object is successfully obtained; returns false otherwise.
      */
-    static bool GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef);
+    static ErrCode GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef);
     /**
      * @brief Requests a certain permission from user.
      * @param bundleName Indicates the name of the bundle.
diff --git a/services/bundlemgr/src/bundle_mgr_host_impl.cpp b/services/bundlemgr/src/bundle_mgr_host_impl.cpp
index 1df5c4bda9471709daf4a065ba2c9d8501917c2e..874c8209e852d66b7f3e7f582984f346ffce1b3a 100644
--- a/services/bundlemgr/src/bundle_mgr_host_impl.cpp
+++ b/services/bundlemgr/src/bundle_mgr_host_impl.cpp
@@ -575,15 +575,15 @@ int BundleMgrHostImpl::CheckPublicKeys(const std::string &firstBundleName, const
     return dataMgr->CheckPublicKeys(firstBundleName, secondBundleName);
 }

-bool BundleMgrHostImpl::GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
+ErrCode BundleMgrHostImpl::GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
 {
     if (!BundlePermissionMgr::VerifyCallingPermission(Constants::PERMISSION_GET_BUNDLE_INFO_PRIVILEGED)) {
         APP_LOGE("verify GET_BUNDLE_INFO_PRIVILEGED failed");
-        return false;
+        return ERR_BUNDLE_MANAGER_QUERY_PERMISSION_DENIED;
     }
     if (permissionName.empty()) {
         APP_LOGE("fail to GetPermissionDef due to params empty");
-        return false;
+        return ERR_BUNDLE_MANAGER_QUERY_PERMISSION_DENIED;
     }
     return BundlePermissionMgr::GetPermissionDef(permissionName, permissionDef);
 }
diff --git a/services/bundlemgr/src/bundle_permission_mgr.cpp b/services/bundlemgr/src/bundle_permission_mgr.cpp
index 9341428913df73756200f54ed08be3541e24e00d..4f5ce3cbddac0c728e50e05f757fb6e54fe611ea 100644
--- a/services/bundlemgr/src/bundle_permission_mgr.cpp
+++ b/services/bundlemgr/src/bundle_permission_mgr.cpp
@@ -618,16 +618,16 @@ int32_t BundlePermissionMgr::VerifyPermission(
     return AccessToken::AccessTokenKit::VerifyAccessToken(tokenId, permissionName);
 }

-bool BundlePermissionMgr::GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
+ErrCode BundlePermissionMgr::GetPermissionDef(const std::string &permissionName, PermissionDef &permissionDef)
 {
     APP_LOGD("BundlePermissionMgr::GetPermissionDef permission %{public}s", permissionName.c_str());
     AccessToken::PermissionDef accessTokenPermDef;
     int32_t ret = AccessToken::AccessTokenKit::GetDefPermission(permissionName, accessTokenPermDef);
     if (ret == AccessToken::AccessTokenKitRet::RET_SUCCESS) {
         ConvertPermissionDef(accessTokenPermDef, permissionDef);
-        return true;
+        return ERR_OK;
     }
-    return false;
+    return ERR_BUNDLE_MANAGER_QUERY_GET_PERMISSION_DEFINE_FAILED;
 }

 bool BundlePermissionMgr::CheckPermissionInDefaultPermissions(const DefaultPermission &defaultPermission,